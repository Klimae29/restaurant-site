---
// src/components/MenuCards.astro - Composant responsive intelligent
import { menus, getMenusCount } from '../data/menu.js';

// Logique pour d√©terminer le layout responsive
const menuCount = getMenusCount();

// Fonction pour d√©terminer les classes CSS selon le nombre de menus
const getGridClasses = (count) => {
  if (count <= 4) {
    // 1-4 menus : une seule ligne
    return {
      container: "grid gap-8 max-w-7xl mx-auto",
      responsive: "grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
    };
  } else if (count <= 6) {
    // 5-6 menus : deux lignes
    return {
      container: "grid gap-8 max-w-6xl mx-auto",
      responsive: "grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
    };
  } else {
    // 7+ menus : trois lignes ou plus
    return {
      container: "grid gap-6 max-w-7xl mx-auto",
      responsive: "grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
    };
  }
};

const gridLayout = getGridClasses(menuCount);
---

<section class="py-6 bg-neutral-warm relative overflow-hidden">
  <!-- Motif de fond d√©coratif -->
  <div class="absolute inset-0 opacity-5">
    <div class="absolute top-20 left-10 w-32 h-32 border-2 border-amber-600 rounded-full transform rotate-12"></div>
    <div class="absolute bottom-32 right-16 w-24 h-24 border-2 border-orange-600 transform -rotate-45"></div>
    <div class="absolute top-1/2 left-1/4 w-16 h-16 bg-yellow-400 rounded-full transform rotate-45"></div>
  </div>

  <div class="container mx-auto px-6 relative z-10">
    <!-- Header de section -->
    <div class="header-section text-center" style="padding-top: 2rem; margin-bottom: 1rem;">
    <h2 class="font-['Playfair_Display'] text-4xl md:text-5xl font-bold text-red-700 mb-4">
      Nuestras Especialidades
    </h2>
    <div class="w-16 h-1 bg-yellow-400 mx-auto"></div>
  </div>

    <!-- Grid responsive des cartes de menu -->
    <div class={`${gridLayout.container} ${gridLayout.responsive}`}>
      {menus.map((menu, index) => (
        <div class="py-4 menu-card group relative cursor-pointer transform transition-all duration-500 hover:scale-105 hover:rotate-1" style={`animation-delay: ${index * 0.1}s`}>


          <!-- Carte principale avec effet papier vieilli -->
          <div class="vintage-paper bg-gradient-to-br from-amber-100 via-yellow-50 to-amber-200 rounded-xl shadow-2xl border-2 border-amber-300/50 p-6 h-full relative overflow-hidden group-hover:shadow-3xl transition-all duration-500">



            <!-- Contenu de la carte -->
            <div class="relative z-10">
              <!-- Header de la carte -->
              <div class="text-center mb-6 border-b-2 border-amber-400/30 pb-4">
                <h3 class="font-['Playfair_Display'] text-2xl font-bold text-amber-900 mb-2">
                  {menu.name}
                </h3>
                <p class="text-sm text-amber-700 italic mb-3">
                  {menu.description}
                </p>
                <div class="text-right">
                  <span class="text-lg font-bold text-red-700 bg-amber-200/50 px-3 py-1 rounded-full">
                    {menu.price}
                  </span>
                </div>
              </div>

              <!-- Liste des plats (petit texte) -->
              <div class="space-y-2 mb-6 text-center">
                {menu.dishes.map((dish) => (
                  <div>
                    <p class="text-xs text-amber-800 leading-relaxed">
                      {dish}
                    </p>
                  </div>
                ))}
              </div>

              <!-- Bouton zoom apparent -->
              <div class="text-center">
                <button
                  class="zoom-btn w-12 h-12 bg-amber-600 hover:bg-amber-700 text-white rounded-full flex items-center justify-center shadow-lg transition-all duration-300 group-hover:scale-110 mx-auto"
                  data-menu-id={menu.id}
                  data-menu-name={menu.name}
                  data-menu-price={menu.price}
                  data-menu-description={menu.description}
                  data-menu-dishes={JSON.stringify(menu.dishes)}
                  data-menu-popular={menu.popular}
                >
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                  </svg>
                </button>
                <p class="text-xs text-amber-700 mt-2 font-medium">
                  Voir en d√©tail
                </p>
              </div>
            </div>

            <!-- Coins d√©chir√©s effect -->
            <div class="absolute top-0 left-0 w-6 h-6 bg-amber-100 transform -rotate-45 -translate-x-3 -translate-y-3"></div>
            <div class="absolute top-0 right-0 w-4 h-4 bg-amber-100 transform rotate-45 translate-x-2 -translate-y-2"></div>
            <div class="absolute bottom-0 left-0 w-5 h-5 bg-amber-100 transform rotate-45 -translate-x-2 translate-y-2"></div>
          </div>
        </div>
      ))}
    </div>

    <!-- Message si aucun menu -->
    {menus.length === 0 && (
      <div class="text-center py-16">
        <p class="text-xl text-amber-700">Aucun menu disponible pour le moment.</p>
      </div>
    )}
  </div>
</section>

<!-- Modal Zoom Plein √âcran -->
<div id="menuModal" class="fixed inset-0 bg-black/90 backdrop-blur-md z-50 flex items-center justify-center opacity-0 pointer-events-none transition-all duration-500">
  <div class="modal-content bg-gradient-to-br from-amber-50 via-yellow-50 to-amber-100 rounded-2xl max-w-4xl mx-4 transform scale-75 transition-all duration-500 shadow-2xl border-4 border-amber-300/50 max-h-[90vh] overflow-y-auto">
    <div class="relative">
      <!-- Bouton fermer -->
      <button
        id="closeMenuModal"
        class="absolute top-6 right-6 z-10 w-12 h-12 bg-red-700 hover:bg-red-800 text-white rounded-full flex items-center justify-center transition-all duration-300 hover:scale-110 shadow-lg"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>

      <!-- Contenu du modal -->
      <div class="p-8 md:p-12">
        <!-- Header du modal -->
        <div class="text-center mb-8 border-b-4 border-amber-400/30 pb-6">
          <div id="modalPopularBadge" class="inline-block bg-red-600 text-white text-sm font-bold px-4 py-2 rounded-full mb-4 hidden">
            üî• MENU POPULAIRE
          </div>
          <h2 id="modalMenuName" class="font-['Playfair_Display'] text-4xl md:text-5xl font-bold text-amber-900 mb-4">
            Menu D√©gustation
          </h2>
          <p id="modalMenuDescription" class="text-xl text-amber-700 italic mb-4">
            Notre s√©lection des meilleurs plats
          </p>
          <div class="text-center">
            <span id="modalMenuPrice" class="text-3xl md:text-4xl font-bold text-red-700 bg-amber-200/70 px-6 py-3 rounded-full">
              65‚Ç¨
            </span>
          </div>
        </div>

        <!-- Liste d√©taill√©e des plats -->
        <div class="space-y-6 mb-8">
          <h3 class="font-['Playfair_Display'] text-2xl font-bold text-amber-900 text-center mb-6">
            Composition du menu
          </h3>
          <div id="modalDishesList" class="space-y-4">
            <!-- Les plats seront ajout√©s dynamiquement -->
          </div>
        </div>

        <!-- Boutons d'action -->
        <div class="flex flex-col md:flex-row gap-4 pt-6 border-t-2 border-amber-400/30">
          <button class="flex-1 bg-gradient-to-r from-red-700 to-orange-600 hover:from-red-800 hover:to-orange-700 text-white font-bold py-4 px-8 rounded-xl transition-all duration-300 hover:scale-105 text-lg">
            R√©server ce menu - <span id="modalPriceBtn">65‚Ç¨</span>
          </button>
          <button class="px-8 py-4 border-3 border-amber-600 text-amber-800 hover:bg-amber-600 hover:text-white rounded-xl transition-all duration-300 hover:scale-105 font-bold">
            Partager ‚ù§Ô∏è
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const zoomBtns = document.querySelectorAll('.zoom-btn');
    const modal = document.getElementById('menuModal');
    const closeModal = document.getElementById('closeMenuModal');

    // Gestion du clic sur les boutons zoom
    zoomBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const menuName = btn.dataset.menuName;
        const menuPrice = btn.dataset.menuPrice;
        const menuDescription = btn.dataset.menuDescription;
        const menuDishes = JSON.parse(btn.dataset.menuDishes || '[]');
        const menuPopular = btn.dataset.menuPopular === 'true';

        // Remplir le modal avec les donn√©es
        document.getElementById('modalMenuName').textContent = menuName;
        document.getElementById('modalMenuPrice').textContent = menuPrice;
        document.getElementById('modalPriceBtn').textContent = menuPrice;
        document.getElementById('modalMenuDescription').textContent = menuDescription;

        // Badge populaire
        const popularBadge = document.getElementById('modalPopularBadge');
        if (menuPopular) {
          popularBadge.classList.remove('hidden');
        } else {
          popularBadge.classList.add('hidden');
        }

        // Ajouter les plats avec un style √©l√©gant
        const dishesList = document.getElementById('modalDishesList');
        dishesList.innerHTML = '';

        menuDishes.forEach((dish, index) => {
          const dishElement = document.createElement('div');
          dishElement.className = 'flex items-center gap-4 p-4 bg-white/50 rounded-lg border border-amber-300/30 shadow-sm';

          dishElement.innerHTML = `
            <div class="w-8 h-8 bg-amber-600 text-white rounded-full flex items-center justify-center font-bold text-sm">
              ${index + 1}
            </div>
            <div class="flex-1">
              <p class="text-lg text-amber-900 font-medium leading-relaxed">
                ${dish}
              </p>
            </div>
            <div class="text-amber-600">
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
              </svg>
            </div>
          `;

          dishesList.appendChild(dishElement);
        });

        // Afficher le modal avec animation
        modal.classList.remove('opacity-0', 'pointer-events-none');
        modal.classList.add('opacity-100');

        setTimeout(() => {
          modal.querySelector('.modal-content').classList.remove('scale-75');
          modal.querySelector('.modal-content').classList.add('scale-100');
        }, 50);

        // Bloquer le scroll
        document.body.style.overflow = 'hidden';
      });
    });

    // Fermer le modal
    function closeModalFunction() {
      modal.querySelector('.modal-content').classList.remove('scale-100');
      modal.querySelector('.modal-content').classList.add('scale-75');

      setTimeout(() => {
        modal.classList.add('opacity-0', 'pointer-events-none');
        modal.classList.remove('opacity-100');
        document.body.style.overflow = 'auto';
      }, 300);
    }

    closeModal?.addEventListener('click', closeModalFunction);

    // Fermer en cliquant √† c√¥t√©
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModalFunction();
      }
    });

    // Fermer avec Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !modal.classList.contains('opacity-0')) {
        closeModalFunction();
      }
    });
  });
</script>

<style>
  /* Effet papier vieilli */
  .vintage-paper {
    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 25%, #fed7aa 50%, #fbbf24 75%, #f59e0b 100%);
    position: relative;
  }

  .vintage-paper::before {
    content: '';
    position: absolute;
    inset: 0;
    background:
      radial-gradient(circle at 20% 80%, rgba(180, 83, 9, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 80% 20%, rgba(146, 64, 14, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 40% 40%, rgba(217, 119, 6, 0.05) 0%, transparent 50%);
    border-radius: inherit;
  }

  /* Animation de survol des cartes */
  .menu-card:hover .vintage-paper {
    transform: translateY(-5px);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  /* Effet de rotation au hover */
  .menu-card:hover {
    transform: scale(1.05) rotate(1deg);
  }

  /* Animation du bouton zoom */
  .zoom-btn {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .zoom-btn:hover {
    transform: scale(1.1) rotate(90deg);
    box-shadow: 0 10px 25px rgba(180, 83, 9, 0.4);
  }

  /* Layout responsive intelligent */

  /* Pour 1-2 menus : centr√© */
  .grid-cols-1:has(.menu-card:nth-child(1)):not(:has(.menu-card:nth-child(3))) .menu-card {
    max-width: 400px;
    margin: 0 auto;
  }

  /* Pour 3 menus : 3 colonnes sur desktop */
  .grid:has(.menu-card:nth-child(3)):not(:has(.menu-card:nth-child(4))) {
    grid-template-columns: repeat(1, 1fr);
  }

  @media (min-width: 768px) {
    .grid:has(.menu-card:nth-child(3)):not(:has(.menu-card:nth-child(4))) {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  /* Pour 4 menus : 2x2 */
  .grid:has(.menu-card:nth-child(4)):not(:has(.menu-card:nth-child(5))) {
    grid-template-columns: repeat(1, 1fr);
  }

  @media (min-width: 768px) {
    .grid:has(.menu-card:nth-child(4)):not(:has(.menu-card:nth-child(5))) {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .grid:has(.menu-card:nth-child(4)):not(:has(.menu-card:nth-child(5))) {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  /* Responsive g√©n√©ral */
  @media (max-width: 768px) {
    .modal-content {
      margin: 1rem;
      max-width: calc(100vw - 2rem);
      max-height: calc(100vh - 2rem);
    }

    .menu-card {
      max-width: none;
    }
  }

  /* Animation d'apparition des √©l√©ments */
  .menu-card {
    opacity: 0;
    animation: fadeInUp 0.6s ease-out forwards;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Effet de texture subtile */
  .vintage-paper::after {
    content: '';
    position: absolute;
    inset: 0;
    background: url('data:image/svg+xml,<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg"><defs><filter id="noise"><feTurbulence baseFrequency="0.9" numOctaves="4" stitchTiles="stitch"/><feComponentTransfer><feFuncA type="discrete" tableValues="0 0.1 0 0.05 0"/></fComponentTransfer></filter></defs><rect width="100%" height="100%" filter="url(%23noise)" opacity="0.1"/></svg>');
    border-radius: inherit;
    pointer-events: none;
  }
</style>
